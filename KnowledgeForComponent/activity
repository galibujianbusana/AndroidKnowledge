1.android的四种启动模式分别是：standard，singleTop，SingleTask，singleInstance. 我们可以在AndroidMainfest.xml中通过Activity标签指定其启动模式：android：lanunchMode。

2.standard模式

   是活动默认的启动模式，该模式，每启动一次都活创建一个活动的实例。

   由Activity1跳转到Activity2，Activity2跳转到Activity3，activity3再跳转到activity1.打印出activity1的标示：每一次都是重新创建一个活动实例。这时我们启动了4个活动    实例，我们需要点击四次back键才能退出程序。



 

3.SingleTop模式：当当前返回栈顶就是该活动时，则不会再重新创建活动实例。

  设置启动模式：

<activity android:name=".MainActivity"
            android:launchMode="singleTop">
在activity1中点击事件中加入代码：

Intent intent=new Intent(MainActivity.this,MainActivity.class);
startActivity(intent);
 

我们在OnGeate中的打印的标示，只会打印出一次，再点击跳转后，并没有启动创建activity1的实例。

4.SIngleTask模式：

每次活动启动时，都会在返回栈中检测该活动是否已存在实例，如果存在则会把该实例对象上面所有的活动统统出栈。否则则创建实例对象。

 

 

5.SingleInstance模式：

 

指定为SingleInstance的活动，会启用一个新的返回栈来管理该活动。其解决的主要问题是：当一个活动，允许其他的程序调用时，而每一个应用程序都会有自己的返回栈，同一个活动则会在不同的返回栈中创建新的实例。如果我们设置为singleInstance模式，则会再同一个返回栈中管理该活动，不论那一个程序访问该活动，都会公用一个返回栈，从而解决了共享活动实例的问题。

设置activity2模式为SingleInstance，点击activity1,跳转到activity2，点击activity2，跳转到activity3.

在每一个活动中打印 getTaskId     Log.i(TAG, "onCreate:MainActivity1TaskID: "+getTaskId());输出结果为：

02-16 21:45:49.686 28520-28520/myapplication.com.mylunchmode I/MainActivity: onCreate:MainActivity1TaskID: 13
02-16 21:45:51.326 28520-28520/myapplication.com.mylunchmode I/Main2Activity: onCreate:Main2Activity1TaskID: 14
02-16 21:45:55.216 28520-28520/myapplication.com.mylunchmode I/Main3Activity: onCreate:Main3Activity1TaskID: 13
可以看出，SingleInstance模式的activity2和1,3并不在一个返回栈中。

跳转到activity3时，点击back键，这时并不会回到activity2了，而是直接回到了activity1.

 

6.活动的知晓：

如何判断当前是哪一个活动？

我们可以写一个BaseActivity，继承于AppcompatActivity。并重写onGreate方法，在方法中加入：Logi（“当前activity:”,getClass.getSimpleName）.

然后所有的activity继承BaseActivity，那么就可以打印出当前activity的名称了。

7.活动的管理：

 

我们可以创建一个活动管理器：

复制代码
class ActivityCollector{

public static List<actiVity>activitys=new ArrayList<>();

public static void addActivity(Activity activity){

activitys.add(activity);

}

public static void removeActivity(Activity activity){

 activitys.remove(activity);

}

 
public static void finishAll(){

for(Activity activity:activitys){

if(!activity.isFinishing){

activity.finish();

}

}

}

}
复制代码
然后我们在BaseActivity中的OnGreate中加入：ActivityCollector.addActivity(this);在onDestroy中加入ActivityCollector.reomveActivity(this);

所有的活动继承BaseActivity即可，当需要在某处退出程序时，可以使用ActivityCollector.finishAll();

 

8:启动一个活动最佳的写法

如果需要启动activity2：则可以在mianactivity2中加入方法：

参数为：Context，传入参数1，传入参数2

复制代码
public static void actionStart(Context context, String data1, String data2){

    Intent intent=new Intent(context,Main2Activity.class);
    intent.putExtra("param1",data1);
    intent.putExtra("param2",data2);
    context.startActivity(intent);
}
复制代码
在activity1中只需要写：Main2Activity.actionStart(MainActivity.this,"数据1","数据2");即可跳转到mainacitivity2，写法简单，便于理解。

 

 8.生命周期

 

复制代码
  <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
复制代码
<1>  启动activity                                 onCreate 被执行了！  onStart 被执行了！                         onResume 被执行了！

        点击back退出：                             onPause 被执行了！   onStop 被执行了！                         onDestroy 被执行了！

        点击跳转进入MainActivity2                   onPause 被执行了！   onSaveInstanceState 被执行了！           onStop 被执行了！

        点击返回再次进入activity                    onRestart 被执行了！ onStart 被执行了！                        onResume 被执行了！

　　　点击home键                                   onPause 被执行了！    onSaveInstanceState 被执行了！             onStop 被执行了！

        从home键再次显示                          onRestart 被执行了！   onStart 被执行了！                         onResume 被执行了！

 

<2>转换成横屏：

 　　onPause 被执行了！

 　　onSaveInstanceState 被执行了！
　　 onStop 被执行了！
　　 onDestroy 被执行了！
 　　onCreate 被执行了！
 　　onStart 被执行了！
　　 onResume 被执行了！

在换成竖屏：

　　onPause 被执行了！
 　  onSaveInstanceState 被执行了！
　　onStop 被执行了！
　　onDestroy 被执行了！
　　onCreate 被执行了！
　　onStart 被执行了！
　　onResume 被执行了！

 

 

复制代码
  <activity android:name=".MainActivity"  android:configChanges="orientation">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
复制代码
 

<1>启动后转换横屏：

　　onConfigurationChanged 被执行了！
　　onPause 被执行了！
　　onSaveInstanceState 被执行了！
　　onStop 被执行了！
　　onDestroy 被执行了！
　　onCreate 被执行了！
　　onStart 被执行了！
　　onResume 被执行了！

   再次转换成竖屏：

    onConfigurationChanged 被执行了！

 

 

复制代码
 <activity android:name=".MainActivity"  android:configChanges="orientation|keyboardHidden">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
复制代码
<1>启动后转换横屏：

 　  onConfigurationChanged 被执行了！
　　onPause 被执行了！
　　onSaveInstanceState 被执行了！
　　onStop 被执行了！
　　onDestroy 被执行了！
　　onCreate 被执行了！
　　onStart 被执行了！
　　onResume 被执行了！

   再次转换成竖屏：

   onConfigurationChanged 被执行了！

<!-- 看别人的博客说：

        加入android:configChanges="orientation|keyboardHidden"  

        切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法

　　  然后亲自试了一试，华为5.1系统，并不如别人所说的那样  ,或许还需要设置什么，过天在找找

-->

 

复制代码
 <activity android:name=".MainActivity"  android:configChanges="orientation|screenSize">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
复制代码
 <1>切换横屏：

　　　　onConfigurationChanged 被执行了！

       再切换为竖屏：
　　　　onConfigurationChanged 被执行了！

 如此设置边不会再走activity的生命周期，只会执行onConfigurationChanged方法。

这是因为从Android 3.2（API 13）开始，横竖屏切换时不仅orientation会发生变化，screenSize也会跟着发生变化，所以要改成上面那样。android:configChanges=orientation|screenSize 告诉activity，不管是orientation变化还是screenSize变化，都不要重新初始化，都通

过onConfigurationChanged让我自己操作。以上就是不让activity重新初始化，而是自己完成横竖屏切换的自适应操作。

保持屏幕禁止切换：

android:screenOrientation="portrait"  设置为竖屏，且不会切换为横屏。（走正常的生命周期）

android:screenOrientation="landscape" 设置为横屏，且不会切换为竖屏。（走正常的生命周期 倒是下面的代码控制横屏的生命周期不一样啦！）

 

代码控制屏幕：

在onCreate里面设置  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);

启动activity，呈现界面确实是横屏，且不会切换为竖屏，但是启动时走得方法为：

onCreate 
onStart 
onResume 
onPause 
onSaveInstanceState 
onStop 
onDestroy 
onCreate 
onStart 
onResume

在onCreate里面设置setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);

启动activity，呈现界面竖屏，且不会切换为横屏，启动时走得方法(正常生命周期)为：

onCreate 
onStart 
onResume

 9.活动被回收现象

当一个活动进入停止状态时，是有可能被系统回收的，那么我们如何保存一些数据呢？

重新方法：

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putString("key","输入你需要保存的value");
    }
 

在onCreate重新获取

复制代码
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if(savedInstanceState!=null){
            String value=savedInstanceState.getString("key");
        }
       ……
}
